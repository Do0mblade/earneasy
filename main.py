

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove

from geopy.geocoders import Nominatim

from config.bot import TOKEN, OWNER_ID
from config.database import Database

from defs.keyboards import start_kb, state_stop, get_location, profile_kb, edit_my_profile_kb, main_menu_kb, create_order_title, create_order_category, job_format, check_orders_kb, search_orders_kb, My_orders_kb, responsed_order_kb, ready_order, work_orders_kb, answer_work_true, responsed_kb, add_referal, Archive_orders_kb, me_kb, admin_users_kb, admin_user_change_status

import asyncio


bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

db = Database()

class Reg_Form(StatesGroup):
    name = State()
    years = State()
    photo = State()
    city = State()
    ref_id = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if await db.check_user_in_db(message.from_user.id):
        await menu(message)
    else:
        start_command = message.text
        ref_id = str(start_command[7:])
        try:
            if ref_id == '' or int(ref_id) == message.from_user.id:
                ref_id = 0
        except:
            ref_id = 0
        async with state.proxy() as data:
            data['ref_id'] = ref_id
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫!\nüí∏ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥, —Ç–æ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!', reply_markup=start_kb())

@dp.message_handler(text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', state='*')
async def stop_state_(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await menu(message)
    else:
        await state.finish()
        if await db.check_user_in_db(message.from_user.id):
            await message.answer('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=await main_menu_kb(message.from_user.id))
        else:
            await message.answer('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
            await start(message, state)

@dp.callback_query_handler(text='start_create_order')
async def start_create_order(callback: types.CallbackQuery):
    await callback.message.answer('qq', reply_markup=await main_menu_kb(callback.from_user.id))

@dp.callback_query_handler(text='start_registration')
async def start_registration_(callback: types.CallbackQuery, state: FSMContext):
    if await db.check_user_in_db(callback.from_user.id):
        await callback.answer('ü•¥ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await Reg_Form.name.set()
        await bot.send_message(chat_id=callback.from_user.id, text='–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!üôã\n–ù–∞–ø–∏—à–∏, <b>–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç</b>?', reply_markup=state_stop())

        await asyncio.sleep(10800)
        if await state.get_state() == 'Reg_Form:years' and not await state.get_state() is None:
            await callback.answer('ü§∑ –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–Ω–∞—é, <b>–∫–∞–∫ –º–æ–∂–Ω–æ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</b>')

@dp.message_handler(state=Reg_Form.name)
async def add_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Reg_Form.next()
    await message.answer('<b>üî¢ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>', reply_markup=state_stop())

    await asyncio.sleep(10800)
    if await state.get_state() == 'Reg_Form:years' and not await state.get_state() is None:
        await message.answer('ü§∑ –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–Ω–∞—é, <b>–∫–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–∑—Ä–∞—Å—Ç?</b>')

@dp.message_handler(state=Reg_Form.years)
async def add_years(message: types.Message, state: FSMContext):
    try:
        if int(message.text) > 0:
            if int(message.text) < 100:
                async with state.proxy() as data:
                    data['years'] = int(message.text)
                await Reg_Form.next()
                await message.answer('–£–ª—ã–±–æ—á–∫—É‚Ä¶üì∏ \n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã!', reply_markup=state_stop())

                await asyncio.sleep(10800)
                if await state.get_state() == 'Reg_Form:photo' and not await state.get_state() is None:
                    await message.answer('ü§∑ –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–Ω–∞—é, <b>–∫–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å?</b>')

            else:
                await state.set_state(Reg_Form.years.state)
                await message.answer('üôÉ –í–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–µ—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç üòä')
        else:
            await state.set_state(Reg_Form.years.state)
            await message.answer(
                'ü§™ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω <b>0</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç üòä')
    except:
        await state.set_state(Reg_Form.years.state)
        await message.answer('üò¶ –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

@dp.message_handler(content_types=['photo'], state=Reg_Form.photo)
async def add_years(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await Reg_Form.next()
    await message.answer('<b>üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.</b>\n\n–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –≤—ã <b>–Ω–µ —Å–º–æ–∂–µ—Ç–µ</b> –Ω–∞–π—Ç–∏ —Å–µ–±–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –ø–æ –≥–æ—Ä–æ–¥—É!\n\n–ü—Ä–∏–º–µ—Ä:\n<code>–ú–æ—Å–∫–≤–∞</code>\n<code>–°–æ—á–∏</code>\n<code>–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</code>', reply_markup=get_location())

    await asyncio.sleep(10800)
    if await state.get_state() == 'Reg_Form:years' and not await state.get_state() is None:
        await message.answer('ü§∑ –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–Ω–∞—é, <b>–≤ –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ –∂–∏–≤—ë—à—å?</b>', reply_markup=get_location())

@dp.message_handler(content_types=['location', 'text'], state=Reg_Form.city)
async def add_years(message: types.Message, state: FSMContext):
    try:
        if message.text is None:
            lat = message.location.latitude
            lon = message.location.longitude
            geolocator = Nominatim(user_agent="geoapiExercises")
            location = geolocator.reverse(f'{lat}, {lon}')
            address = location.raw['address']
            city = address.get('city', '')
        else:
            city = message.text
        async with state.proxy() as data:
            data['city'] = city
        data = await state.get_data()
        await state.finish()
        username = message.from_user.username
        user_id = message.from_user.id
        if message.from_user.id == OWNER_ID:
            await db.insert_user(user_id, data, username, rights='admin')
        else:
            await db.insert_user(user_id, data, username)
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>/help</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç.', reply_markup=await main_menu_kb(message.from_user.id))
    except KeyError:
        await state.set_state(Reg_Form.city.state)
        await message.answer('üìõ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

@dp.message_handler(commands=['profile'])
async def profile(message: types.Message):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.select_user(message.from_user.id)
        count_referals = await db.count_referals(message.from_user.id)

        text = f"""
üßø <i>{data[2]}, {data[4]}</i>
üåé <i>{data[5]}</i>

‚ù§Ô∏è <i>–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –¥—Ä—É–∑–µ–π:</i> <code>{count_referals}</code>

ü§ù <i>–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫:</i> <code>{data[11]}</code>

<b>ID:</b> <code>{data[1]}</code>
"""
        photo = data[3]

        if len(text) < 1023:
            await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=text, reply_markup=profile_kb())
        else:
            await bot.send_photo(chat_id=message.from_user.id, photo=photo)
            await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=profile_kb())
    else:
        await message.reply('<i>üìõ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - <b>/start</b></i>', reply_markup=await main_menu_kb(message.from_user.id))


@dp.callback_query_handler(text='edit_profile')
async def edit_my_profile(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id, text='üìú –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=edit_my_profile_kb())


class Edit_Profile(StatesGroup):
    photo = State()
    name = State()
    years = State()
    city = State()

@dp.callback_query_handler(text_contains='edit_')
async def edit_(callback: types.CallbackQuery):
    data = (callback.data)[5:]
    if data == 'name':
        await Edit_Profile.name.set()
        await callback.message.answer('üì£ –ö–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup=state_stop())
    elif data == 'years':
        await Edit_Profile.years.set()
        await callback.message.answer('üî¢ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=state_stop())
    elif data == 'city':
        await Edit_Profile.city.set()
        await callback.message.answer('üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.\n\n–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –≤—ã <b>–Ω–µ —Å–º–æ–∂–µ—Ç–µ</b> –Ω–∞–π—Ç–∏ —Å–µ–±–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –ø–æ –≥–æ—Ä–æ–¥—É!\n\n–ü—Ä–∏–º–µ—Ä:\n<code>–ú–æ—Å–∫–≤–∞</code>\n<code>–°–æ—á–∏</code>\n<code>–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</code>', reply_markup=get_location())
    elif data == 'photo':
        await Edit_Profile.photo.set()
        await callback.message.answer('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.', reply_markup=state_stop())

@dp.message_handler(state=Edit_Profile.name)
async def update_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    data = await state.get_data()
    await state.finish()
    if data['name'] != ((await db.select_user(message.from_user.id))[2]):
        await db.update_profile(user_id=message.from_user.id, name=data['name'])
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë –∏–º—è!', reply_markup=await main_menu_kb(message.from_user.id))
    else:
        await message.answer('üôÉ –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–∫–æ–µ –∏–º—è!', reply_markup=await main_menu_kb(message.from_user.id))

@dp.message_handler(state=Edit_Profile.years)
async def update_years(message: types.Message, state: FSMContext):
    try:
        if int(message.text) > 0:
            if int(message.text) < 100:
                async with state.proxy() as data:
                    data['years'] = int(message.text)
                data = await state.get_data()
                await state.finish()
                if data['years'] != ((await db.select_user(message.from_user.id))[4]):
                    await db.update_profile(user_id=message.from_user.id, years=data['years'])
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!', reply_markup=await main_menu_kb(message.from_user.id))
                else:
                    await message.answer('üôÉ –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç!', reply_markup=await main_menu_kb(message.from_user.id))
            else:
                await state.set_state(Edit_Profile.years.state)
                await message.answer('üôÉ –í–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–µ—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç üòä')
        else:
            await state.set_state(Edit_Profile.years.state)
            await message.answer(
                'ü§™ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω <b>0</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç üòä')
    except:
        await state.set_state(Edit_Profile.years.state)
        await message.answer('üßê –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

@dp.message_handler(content_types=['location', 'text'], state=Edit_Profile.city)
async def update_city(message: types.Message, state: FSMContext):
    try:
        if message.text is None:
            lat = message.location.latitude
            lon = message.location.longitude
            geolocator = Nominatim(user_agent="geoapiExercises")
            location = geolocator.reverse(f'{lat}, {lon}')
            address = location.raw['address']
            city = address.get('city', '')
        else:
            city = message.text
        async with state.proxy() as data:
            data['city'] = city
        data = await state.get_data()
        await state.finish()
        if data['city'] != ((await db.select_user(message.from_user.id))[5]):
            await db.update_profile(user_id=message.from_user.id, city=data['city'])
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥!', reply_markup=await main_menu_kb(message.from_user.id))
        else:
            await message.answer('üôÉ –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥!', reply_markup=await main_menu_kb(message.from_user.id))
    except:
        await state.set_state(Edit_Profile.city.state)
        await message.answer('üòµ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

@dp.message_handler(content_types=['photo'], state=Edit_Profile.photo)
async def update_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    data = await state.get_data()
    await state.finish()
    await db.update_profile(user_id=message.from_user.id, photo=data['photo'])
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', reply_markup=await main_menu_kb(message.from_user.id))

@dp.message_handler(commands=['ref'])
async def referal_url(message: types.Message):
    if await db.check_user_in_db(message.from_user.id):
        count_referals = await db.count_referals(message.from_user.id)
        user = await db.select_user(message.from_user.id)
        me = await bot.get_me()
        if int(user[6]) != 0:
            referer = f'\nüåù <i>ID –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:</i> \n<code>{user[6]}</code>\n'
        else:
            referer = ''
        text = f"""
üåö <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>    

‚ù§Ô∏è <i>–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –¥—Ä—É–∑–µ–π:</i> <code>{count_referals}</code>
{referer}
üåê <i>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>
<code>https://t.me/{me.username}?start={message.from_user.id}</code>

üõ°Ô∏è <i>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</i> 
<code>{message.from_user.id}</code>

<span class="tg-spoiler">–ù–∞–¥–µ—é—Å—å –Ω–∞ –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ üòÅ</span>

<b><i>/me</i> - –æ –Ω–∞—Å –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö. üéÅüéâ</b>
"""
        await message.answer(text, reply_markup=await add_referal(message.from_user.id))
    else:
        await message.reply('<i>üìõ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - <b>/start</b></i>', reply_markup=await main_menu_kb(message.from_user.id))

class ADDref(StatesGroup):
    ref_id = State()

@dp.callback_query_handler(text='add_referal')
async def add_referal_id(callback: types.CallbackQuery, state: FSMContext):
    await ADDref.next()
    await callback.message.answer('üî¢ –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.', reply_markup=state_stop())

@dp.message_handler(state=ADDref.ref_id)
async def add_ref_id(message: types.Message, state: FSMContext):
    try:
        if int(message.text) != message.from_user.id:
            dt = await db.select_user(int(message.text))
            if not dt is None:
                async with state.proxy() as data:
                    data['ref_id'] = message.text
                st = await state.get_data()
                await state.finish()
                await db.update_ref_id(message.from_user.id, int(st['ref_id']))
                await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞!')
            else:
                await message.answer('üìõ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!', reply_markup=state_stop())
        else:
            await message.answer('üòâ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!', reply_markup=state_stop())
    except:
        await message.answer('üìõ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!', reply_markup=state_stop())

@dp.message_handler(commands=['menu'])
async def menu(messgae: types.Message):
    await messgae.answer('üìù', reply_markup=await main_menu_kb(messgae.from_user.id))

class Create_Order(StatesGroup):
    title = State()
    category = State()
    subcategory = State()
    company = State()
    format_job = State()
    adress = State()
    cost = State()
    deadlines = State()
    duties = State()
    requirements = State()
    additionally = State()

@dp.message_handler(commands=['cr'])
async def create_order(message: types.Message):
    await Create_Order.title.set()
    await message.answer('üìå –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.\n\n<i>–í–∞–∫–∞–Ω—Å–∏—è - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è\n–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞/–∑–∞–¥–∞—á–∞ - 1-3 –¥–Ω—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</i>', reply_markup=create_order_title())

@dp.message_handler(state=Create_Order.title)
async def add_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    st = await state.get_data()
    await Create_Order.next()
    if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await message.answer('‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –í–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é.\n\n<i>P.S. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–µ –Ω–∞–∂–∏–º–∞—è –Ω–∞ ¬´–¥—Ä—É–≥–æ–µ¬ª. –¢–æ–≥–¥–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–ª–µ–≤—ã–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º –∏ –±—É–¥–µ—Ç –ª—É—á—à–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è.</i>', reply_markup=await create_order_category('–í–∞–∫–∞–Ω—Å–∏—è'))
    elif st['title'] == '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞/–∑–∞–¥–∞—á–∞':
        await message.answer('‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É</b> –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.', reply_markup=await create_order_category('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞/–∑–∞–¥–∞—á–∞'))
    else:
        await Create_Order.title.set()
        await message.answer('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ.', reply_markup=create_order_title())

@dp.message_handler(state=Create_Order.category)
async def add_category(message: types.Message, state: FSMContext):
    st = await state.get_data()
    categories = []
    cat = []
    if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        cat = await db.select_categories('–í–∞–∫–∞–Ω—Å–∏—è')
    elif st['title'] == '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞/–∑–∞–¥–∞—á–∞':
        cat = await db.select_categories('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞/–∑–∞–¥–∞—á–∞')
    for i in cat:
        categories.append(i[0])
    if message.text in categories or message.text == '–î—Ä—É–≥–æ–µ':
        async with state.proxy() as data:
            data['category'] = message.text
        if message.text == '–î—Ä—É–≥–æ–µ':
            if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
                await Create_Order.next()
                await message.answer('‚úçÔ∏è –í–ø–∏—à–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é <b>–≤–∞–∫–∞–Ω—Å–∏—é</b> –í–∞–º –Ω—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n\n<i>–ü—Ä–∏–º–µ—Ä:\nIT-–†–µ–∫—Ä—É—Ç–µ—Ä</i>', reply_markup=state_stop())
            else:
                await Create_Order.next()
                await message.answer('üéØ –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–¥ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –Ω—É–∂–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.', reply_markup=state_stop())
        else:
            async with state.proxy() as data:
                data['subcategory'] = None
            await Create_Order.company.set()
            await message.answer('üè¶–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ  –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n–ï—Å–ª–∏ –í—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏, —É–∫–∞–∂–∏—Ç–µ <b>–§–ò–û</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è ¬´–õ–∏—Å—Ç–ê—Ä—Ç¬ª/–ê–ª–µ–∫—Å–µ–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á</i>')

    else:
        await Create_Order.category.set()
        await message.answer('üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ.', reply_markup=await create_order_category(st['title']))

@dp.message_handler(state=Create_Order.subcategory)
async def add_subcategory(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['subcategory'] = message.text
    await Create_Order.next()
    await message.answer('üè¶–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ  –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n–ï—Å–ª–∏ –í—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏, —É–∫–∞–∂–∏—Ç–µ <b>–§–ò–û</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è ¬´–õ–∏—Å—Ç–ê—Ä—Ç¬ª/–ê–ª–µ–∫—Å–µ–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á</i>')

@dp.message_handler(state=Create_Order.company)
async def add_company(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company'] = message.text
    dt = await state.get_data()
    await Create_Order.next()
    await message.answer('üë®‚Äçüíª –£—Ç–æ—á–Ω–∏—Ç–µ <b>—Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã</b>.', reply_markup=await job_format(dt['title']))

@dp.message_handler(state=Create_Order.format_job)
async def add_format_job(message: types.Message, state: FSMContext):
    formats = ['–û–Ω–ª–∞–π–Ω', '–û—Ñ—Ñ–ª–∞–π–Ω', '–ì–∏–±—Ä–∏–¥']
    st = await state.get_data()
    if message.text in formats:
        async with state.proxy() as data:
            data['format_job'] = message.text
        await Create_Order.next()
        st = await state.get_data()
        if st['format_job'] != '–û–Ω–ª–∞–π–Ω':
            if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
                await message.answer('üìç –ù–∞–ø–∏—à–∏—Ç–µ <b>–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ –æ—Ñ–∏—Å–∞</b>. –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–≥.–ú–æ—Å–∫–≤–∞, —É–ª.–°–∞–º–æ–∫–∞—Ç–Ω–∞—è –¥.4 —Å—Ç—Ä.1</i>', reply_markup=state_stop())
            else:
                await message.answer('üìç –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–º.–©–µ–ª–∫–æ–≤—Å–∫–∞—è, –æ–∫–æ–ª–æ –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¢–¶ ¬´–©—ë–ª–∫–æ–≤—Å–∫–∏–π¬ª.</i>', reply_markup=state_stop())
        else:
            async with state.proxy() as data:
                data['adress'] = None
            await Create_Order.cost.set()
            if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
                await message.answer('üí∏ –£–∫–∞–∂–∏—Ç–µ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–û–∫–ª–∞–¥ 30 —Ç—ã—Å.—Ä. + 5 —Ç—ã—Å.—Ä. –∑–∞ –∫–∞–∂–¥—É—é –∑–∞–∫—Ä—ã—Ç—É—é –≤–∞–∫–∞–Ω—Å–∏—é.</i>', reply_markup=state_stop())
            else:
                await message.answer('üí∏ –£–∫–∞–∂–∏—Ç–µ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–û–ø–ª–∞—Ç–∞ –ø–æ—á–∞—Å–æ–≤–∞—è - 350—Ä/—á–∞—Å.</i>', reply_markup=state_stop())
    else:
        await Create_Order.format_job.set()
        await message.answer('üìõ –í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.', reply_markup=await job_format(st['title']))


@dp.message_handler(state=Create_Order.adress)
async def add_adress(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adress'] = message.text
    st = await state.get_data()
    if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await Create_Order.next()
        await message.answer('üí∏ –£–∫–∞–∂–∏—Ç–µ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–û–∫–ª–∞–¥ 30 —Ç—ã—Å.—Ä. + 5 —Ç—ã—Å.—Ä. –∑–∞ –∫–∞–∂–¥—É—é –∑–∞–∫—Ä—ã—Ç—É—é –≤–∞–∫–∞–Ω—Å–∏—é</i>', reply_markup=state_stop())
    else:
        await Create_Order.next()
        await message.answer('üí∏ –£–∫–∞–∂–∏—Ç–µ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–û–ø–ª–∞—Ç–∞ –ø–æ—á–∞—Å–æ–≤–∞—è - 350—Ä/—á–∞—Å.</i>', reply_markup=state_stop())

@dp.message_handler(state=Create_Order.cost)
async def add_cost(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cost'] = message.text
    st = await state.get_data()
    if st['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await Create_Order.next()
        await message.answer('‚è∞ –£–∫–∞–∂–∏—Ç–µ <b>–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n5/2 —Å 9:00 –¥–æ 18:00.</i>')
    else:
        await Create_Order.next()
        await message.answer('‚è∞ –£–∫–∞–∂–∏—Ç–µ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö.</b>\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–í—ã–π—Ç–∏ –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ª–∏—Å—Ç–æ–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 12 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 17:30 –∏ –¥–æ 19:30.</i>', reply_markup=state_stop())

@dp.message_handler(state=Create_Order.deadlines)
async def add_deadlines(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadlines'] = message.text
    dt = await state.get_data()
    await Create_Order.next()
    if dt['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await message.answer('üíº –£–∫–∞–∂–∏—Ç–µ <b>–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n‚Ä¢–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö, –≤–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é;\n‚Ä¢–í–µ–¥–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–¥ –∫–ª—é—á;\n‚Ä¢–û–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏;\n‚Ä¢–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å.</i>', reply_markup=state_stop())
    else:
        await message.answer('üíº –£–∫–∞–∂–∏—Ç–µ <b>–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.</b>\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–†–∞–∑–¥–∞—á–∞ –ª–∏—Å—Ç–æ–≤–æ–∫ –æ–∫–æ–ª–æ –º–µ—Ç—Ä–æ —Å –∫—Ä–∞—Ç–∫–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è.</i>')

@dp.message_handler(state=Create_Order.duties)
async def add_duties(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['duties'] = message.text
    dt = await state.get_data()
    await Create_Order.next()
    if dt['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await message.answer('üßë‚Äçüíº –£–∫–∞–∂–∏—Ç–µ <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>.\n\n<i>–ü—Ä–∏–º–µ—Ä:\n‚Ä¢–ì—Ä–∞–º–æ—Ç–Ω–∞—è —É—Å—Ç–Ω–∞—è –∏ –ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å;\n‚Ä¢–û–ø—ã—Ç –≤–µ–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∏–ª–∏ –ª–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤;\n‚Ä¢–û–ø—ã—Ç –≤ –Ω–∞–π–º–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è.</i>', reply_markup=state_stop())
    else:
        await message.answer('ü§µüèº‚Äç‚ôÇÔ∏è –£–∫–∞–∂–∏—Ç–µ <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É.</b>\n\n<i>–ü—Ä–∏–º–µ—Ä:\n‚Ä¢–í–æ–∑—Ä–∞—Å—Ç 18+\n‚Ä¢–ì—Ä–∞–º–æ—Ç–Ω–∞—è —É—Å—Ç–Ω–∞—è —Ä–µ—á—å;\n‚Ä¢–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å;\n‚Ä¢–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:)</i>')

@dp.message_handler(state=Create_Order.requirements)
async def add_requirements(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['requirements'] = message.text
    dt = await state.get_data()
    await Create_Order.next()
    if dt['title'] == '–í–∞–∫–∞–Ω—Å–∏—è':
        await message.answer('üóÇÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã.\n–ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª\n\n<i>–ü—Ä–∏–º–µ—Ä:\n‚Ä¢–î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤;\n‚Ä¢–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—Ç—ã;\n‚Ä¢–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç;\n‚Ä¢–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è - –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫. –ù–µ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è.</i>', reply_markup=state_stop())
    else:
        await message.answer('‚úçüèª –£–∫–∞–∂–∏—Ç–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã.</b>\n–ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –≤ ZOOM.\n–õ–∏—Å—Ç–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å —Å –æ—Ñ–∏—Å–∞ –Ω–∞ –º.–ö—É—Ä—Å–∫–∞—è.</i>', reply_markup=state_stop())


@dp.message_handler(state=Create_Order.additionally)
async def add_additionally(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['additionally'] = message.text
    data = await state.get_data()
    await state.finish()
    username = message.from_user.username
    await db.insert_order(message.from_user.id, data, username)
    data2 = await db.select_all_AdminsAndModers()
    dc = await db.Dont_Check_orders()
    for i in data2:
        await bot.send_message(chat_id=i[0], text=f'‚ùó –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, —Ç—Ä–µ–±—É—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: <b>{data["company"]}</b>\n\n–í—Å–µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <code>{len(dc)}</code>\n\n<i><b>/check</b></i> - –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤.')

    await message.answer('üõ†Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.', reply_markup=await main_menu_kb(message.from_user.id))

@dp.message_handler(commands=['search'])
async def search_orders(message: types.Message, page=0, message_id=None):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.search_orders(message.from_user.id)
        last_page = False
        if data == []:
            if message_id is None:
                await message.answer('üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.\n\n–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –≤–∞—Å –≤ –ø–æ–∏—Å–∫–µ, —á—Ç–æ–±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/my_orders</b>.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id, text='üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.')
        else:
            if message_id is None:
                await message.answer(f'üåü –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(data)}')
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            data = data[int(page)]

            if data[7] == 'None':
                adress = ''
            else:
                adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

            if data[4] == 'None':
                 subcategory = ''
            else:
                subcategory = ': ' + data[4]

            text = f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}

<code>{data[18]}</code>
"""
            post_id = data[0]
            if message_id is None:
                await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await search_orders_kb(page, last_page, post_id))
            else:
                await bot.edit_message_text(text=text, chat_id=message.from_user.id, message_id=message_id, reply_markup=await search_orders_kb(page, last_page, post_id))
    else:
        await message.reply('<i>üìõ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - <b>/start</b></i>', reply_markup=await main_menu_kb(message.from_user.id))



@dp.callback_query_handler(text_contains='search_pg_')
async def next_back_page_search(callback: types.CallbackQuery):
    data = (callback.data)[10:]
    await search_orders(callback, page=int(data), message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='respond_')
async def next_back_page_search(callback: types.CallbackQuery):
    order_id = (callback.data)[8:]
    if await db.check_responses_on_order_user(callback.message.chat.id, int(order_id)):
        await callback.message.answer('üìõ –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!')
    else:
        await db.insert_response(callback.message.chat.id, int(order_id))
        data = await db.select_order_for_id(int(order_id))
        user = await db.select_user(callback.message.chat.id)
        responses = await db.select_all_responses_order(int(order_id))
        await callback.message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!')
        if data[4] == 'None':
            subcategory = data[3]
        else:
            subcategory = ': ' + data[4]
        await bot.send_message(chat_id=data[1], text=f'–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ ‚ú®\n\n–ó–∞–∫–∞–∑:\n<b>{data[2]}: {subcategory}</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n<b>{user[2]}, {user[4]}, {user[5]}</b>\n\n–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <code>{len(responses)}</code>\n\n/my_orders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –Ω–∏—Ö.')

@dp.message_handler(commands=['my_orders'])
async def my_orders(message: types.Message, page=0, message_id=None):
        data = await db.orders_user(message.from_user.id)
        last_page = False
        if data == []:
            if message_id is None:
                await message.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id, text='üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
        else:
            if message_id is None:
                await message.answer(f'üßæ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã: {len(data)}')
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            try:
                data = data[int(page)]
            except:
                data = data[0]

            if data[15]:
                if data[16]:
                    ban = '\n<code><b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞</b></code>'
                else:
                    ban = ''
                txt = f'\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>–û–¥–æ–±—Ä–µ–Ω–æ</code>{ban}'
            else:
                txt = '\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</code>'

            resp = await db.select_all_responses_order(data[0])

            if data[7] == 'None':
                adress = ''
            else:
                adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

            if data[4] == 'None':
                subcategory = ''
            else:
                subcategory = ': ' + data[4]

            text = f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}

üîΩ <b>–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É</b> üîΩ
–°–æ–∑–¥–∞–Ω: <code>{data[18]}</code>{txt}
–û—Ç–∫–ª–∏–∫–æ–≤: <code>{len(resp)}</code>
"""
            post_id = data[0]
            if message_id is None:
                await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await My_orders_kb(page, last_page, post_id))
            else:
                await bot.edit_message_text(text=text, chat_id=message.from_user.id, message_id=message_id, reply_markup=await My_orders_kb(page, last_page, post_id))


@dp.callback_query_handler(text_contains='morders_pg_')
async def next_back_page_my_orders(callback: types.CallbackQuery):
        data = (callback.data)[11:]
        await my_orders(callback, page=int(data), message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='archive_')
async def archive_order(callback: types.CallbackQuery):
        data = ((callback.data)[8:]).split('_')
        await db.archive_order(int(data[0]))
        await callback.answer('üóÉÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤.')
        await my_orders(callback, page=int(data[1])+1, message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='responsed_')
async def responsed_order(callback: types.CallbackQuery, page=0, message_id=None, order_id=None):
        if order_id is None:
            data = (callback.data)[10:]
            order_id = data
        data = await db.select_all_responses_order(int(order_id))
        last_page = False
        if data == []:
            if message_id is None:
                await callback.message.answer('üö´ –û—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=callback.from_user.id,
                                            text='üö´ –û—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.')
        else:
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            try:
                data = data[int(page)]
            except:
                data = data[0]

            user_info = await db.select_user(data[1])
            text = f"""
üßø <i>{user_info[2]}, {user_info[4]}</i>
üåé <i>{user_info[5]}</i>

ü§ù <i>–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫:</i> <code>{user_info[11]}</code>
"""
            if message_id is None:
                await bot.send_message(chat_id=callback.from_user.id, text=text, reply_markup=await responsed_order_kb(page, last_page, order_id, user_info[1]))
            else:
                await bot.edit_message_text(text=text, chat_id=callback.from_user.id, message_id=message_id, reply_markup=await responsed_order_kb(page, last_page, order_id, user_info[1]))

@dp.callback_query_handler(text_contains='rorder_pg_')
async def next_back_page_responsed(callback: types.CallbackQuery):
        data = ((callback.data)[10:]).split('_')
        await responsed_order(callback, page=int(data[0]), message_id=callback.message.message_id, order_id=int(data[1]))

@dp.callback_query_handler(text_contains='respons_true_')
async def respons_true_user(callback: types.CallbackQuery):
        data = ((callback.data)[13:]).split('_')
        order_data = await db.order(int(data[1]))
        user_data = await db.select_user(int(data[0]))
        if order_data[4] == 'None':
            subcategory = order_data[3]
        else:
            subcategory = order_data[4]
        text = f"""
‚òï –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user_data[2]} üéâ üéä

üîÆ –¢–µ–±—è –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:
<b>{order_data[2]}: {subcategory}</b>

üé® –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!
"""
        data.append(order_data[1])
        await bot.send_message(chat_id=data[0], text=text, reply_markup=await ready_order(data))
        await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.from_user.id)
        await callback.message.answer(f'üìß –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_data[2]}</b> –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.')

@dp.callback_query_handler(text_contains='ready_order_')
async def answer_user_on_order(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = ((callback.data)[12:]).split('_')
        check = await db.select_executor_order(int(data[2]))
        if check[0] is None:
            if data[0] == 'true':
                await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
                executor_data = await db.select_user(callback.from_user.id)
                order_data = await db.order(int(data[2]))
                await db.update_executor_id_order(callback.from_user.id, int(data[2]))
                if order_data[7] == 'None':
                    adress = ''
                else:
                    adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{order_data[6]}</code>\n'
                if order_data[4] == 'None':
                    subcategory = ''
                else:
                    subcategory = ': ' + order_data[4]
                text1 = f'üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫</b>:\n@{order_data[21]}'
                text2 = f"""
üî∂ <b>{order_data[2]}</b>:
{order_data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{order_data[5]}</b></code>

üî∑ <b>{order_data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{order_data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{order_data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{order_data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{order_data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{order_data[10]}

<i><b>/work</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.</i>
"""
                await bot.send_message(chat_id=callback.from_user.id, text=text1)
                await bot.send_message(chat_id=callback.from_user.id, text=text2)
                if order_data[4] == 'None':
                    subcategory = order_data[3]
                else:
                    subcategory = order_data[4]
                text3 = f"""
üßø <i>{executor_data[2]}, {executor_data[4]}</i>
üåé <i>{executor_data[5]}</i>
ü¶æ <b>@{executor_data[10]}</b>

üëç –°–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:
<b>{order_data[2]}: {subcategory}</b>

‚ö†Ô∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, <b>–≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å</b>.
"""
                photo2 = executor_data[3]
                await bot.send_photo(chat_id=order_data[1], photo=photo2, caption=text3)
            elif data[0] == 'false':
                await db.delete_respons_user(callback.from_user.id, int(data[2]))
                await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
                await callback.message.answer('–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å üòî')
                await bot.send_message(chat_id=data[3], text='üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.')
        else:
            await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text='üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ –æ–ø–µ—Ä–µ–¥–∏–ª –≤–∞—Å –∏ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ —Ä–∞–Ω—å—à–µ.')


@dp.message_handler(commands=['work'])
async def orders_in_work(message: types.Message, page=0, message_id=None):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.orders_in_progress(message.from_user.id)
        last_page = False
        if data == []:
            if message_id is None:
                await message.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id,
                                            text='üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.')
        else:
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            try:
                data = data[int(page)]
            except:
                data = data[0]

            if data[7] == 'None':
                adress = ''
            else:
                adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

            if data[4] == 'None':
                subcategory = ''
            else:
                subcategory = ': ' + data[4]

            text = f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}
"""
            post_id = data[0]
            username = data[21]
            if message_id is None:
                await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await work_orders_kb(page, last_page, post_id, username))
            else:
                await bot.edit_message_text(text=text, chat_id=message.from_user.id, message_id=message_id, reply_markup=await work_orders_kb(page, last_page, post_id, username))
    else:
        await message.reply('<i>üìõ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - <b>/start</b></i>', reply_markup=await main_menu_kb(message.from_user.id))



@dp.callback_query_handler(text_contains='work_pg_')
async def next_back_page_my_orders(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = (callback.data)[8:]
        await orders_in_work(callback, page=int(data), message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='work_answer_')
async def work_answer(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = ((callback.data)[12:]).split('_')
        order_data = await db.order(int(data[1]))
        user_data = await db.select_user(callback.from_user.id)
        if data[0] == 'true':
            await callback.message.answer('üìß –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é, –æ–∂–∏–¥–∞–π—Ç–µ.')
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            if order_data[4] == 'None':
                subcategory = order_data[3]
            else:
                subcategory = order_data[4]
            await bot.send_message(chat_id=order_data[1], text=f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_data[2]}</b> –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.\n\n–ó–∞–∫–∞–∑:\n<b>{order_data[2]}: {subcategory}</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω–∏—Ç–µ —ç—Ç–æ.', reply_markup=answer_work_true(data[1]))
        elif data[0] == 'false':
            await db.del_update_executor_id_order(int(data[1]))
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.message.answer('–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å üòî')
            await bot.send_message(chat_id=order_data[1], text='üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.')
            await db.delete_respons_user(user_data[1], order_data[0])

@dp.callback_query_handler(text_contains='work_completed_')
async def work_completed(callback: types.CallbackQuery):
        data = ((callback.data)[15:]).split('_')
        order_data = await db.order(int(data[1]))
        user_dt = await db.select_user(order_data[20])
        if data[0] == 'true':
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.message.answer('‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.')
            await bot.send_message(chat_id=user_dt[1], text='‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–∫–∞–∑—á–∏–∫ –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π!')
            rep = await db.select_transactions_completed(user_dt[1])
            await db.update_transactions_completed(user_dt[1], (int(rep[0])+1))
            if await db.check_user_in_db(order_data[1]):
                rep = await db.select_transactions_completed(order_data[1])
                await db.update_transactions_completed(order_data[1], (int(rep[0]) + 1))
            await db.completed_order(int(data[1]))
            await db.delete_respons_user(user_dt[1], data[1])
        elif data[0] == 'false':
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. üëç')
            await bot.send_message(chat_id=user_dt[1], text='üìõ –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É.')

@dp.message_handler(commands='responses')
async def responses_user(message: types.Message, page=0, message_id=None):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.select_all_responses_user(message.from_user.id)
        last_page = False
        if data == []:
            if message_id is None:
                await message.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id,
                                            text='üö´ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.')
        else:
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            try:
                data = data[int(page)]
            except:
                data = data[0]

            data = await db.order(data[2])

            if data[7] == 'None':
                adress = ''
            else:
                adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

            if data[4] == 'None':
                subcategory = ''
            else:
                subcategory = ': ' + data[4]

            text = f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}
"""
            post_id = data[0]
            if message_id is None:
                await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await responsed_kb(page, last_page, post_id, message.from_user.id))
            else:
                await bot.edit_message_text(text=text, chat_id=message.from_user.id, message_id=message_id, reply_markup=await responsed_kb(page, last_page, post_id, message.from_user.id))
    else:
        await message.reply('<i>üìõ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - <b>/start</b></i>', reply_markup=await main_menu_kb(message.from_user.id))


@dp.callback_query_handler(text_contains='order_respo_')
async def no_respons(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = ((callback.data)[12:]).split('_')
        await db.delete_respons_user(int(data[1]), int(data[0]))
        await callback.message.answer('‚úÖ –û—Ç–∫–ª–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
        await responses_user(callback, int(data[2]), callback.message.message_id)

@dp.callback_query_handler(text_contains='order_respons_pg_')
async def next_back_page_responses_user(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = (callback.data)[17:]
        await responses_user(callback, page=int(data), message_id=callback.message.message_id)


@dp.message_handler(commands='archive')
async def archive_orders_user(message: types.Message, page=0, message_id=None):
        data = await db.select_archive_orders_user(message.from_user.id)
        last_page = False
        if data == []:
            if message_id is None:
                await message.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ.')
            else:
                await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id, text='üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ.')
        else:
            if last_page == False:
                try:
                    dt = data[int(page) + 1]
                except:
                    last_page = True
            if len(data) == 1:
                last_page = True
            try:
                data = data[int(page)]
            except:
                data = data[0]

            if data[13]:
                if data[14]:
                    ban = '<code><b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞</b></code>'
                else:
                    ban = ''
                txt = f'\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>–û–¥–æ–±—Ä–µ–Ω–æ</code>\n{ban}'
            else:
                txt = '\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</code>'

            resp = await db.select_all_responses_order(data[0])

            if data[6] == 'None':
                adress = ''
            else:
                adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

            if data[4] == 'None':
                subcategory = ''
            else:
                subcategory = ': ' + data[4]

            text = f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}

üîΩ <b>–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É</b> üîΩ
–°–æ–∑–¥–∞–Ω: <code>{data[18]}</code>{txt}
–û—Ç–∫–ª–∏–∫–æ–≤: <code>{len(resp)}</code>
"""
            post_id = data[0]
            if message_id is None:
                await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await Archive_orders_kb(page, last_page, post_id))
            else:
                await bot.edit_message_text(text=text, chat_id=message.from_user.id, message_id=message_id, reply_markup=await Archive_orders_kb(page, last_page, post_id))

@dp.callback_query_handler(text_contains='archive_orders_pg_')
async def next_back_page_my_orders(callback: types.CallbackQuery):
        data = (callback.data)[18:]
        await archive_orders_user(callback, page=int(data), message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='public_')
async def archive_order(callback: types.CallbackQuery):
        data = ((callback.data)[7:]).split('_')
        await db.public_order(int(data[0]))
        await callback.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.')
        await archive_orders_user(callback, page=int(data[1])+1, message_id=callback.message.message_id)

@dp.message_handler(commands=['me'])
async def me(message: types.Message):
    text = """
–ü—Ä–æ–µ–∫—Ç <b>¬´EarnEasy¬ª</b> —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–∫–ª–∞–¥–∫–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏, —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!

<i>–ß—Ç–æ–±—ã –∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É <b><a href="https://vk.com/earneasybot">–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</a></b>!

<span class="tg-spoiler">–¢–∞–º —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ–¥–±–æ—Ä–∫–∏ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –∞ —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –ø—Ä–∏–∑–æ–≤üéÅ</span></i>
"""
    await message.answer(text, reply_markup=me_kb())





# ADMIN COMMANDS
@dp.message_handler(commands=['set_admin'])
async def set_admin(message: types.Message):
    if await db.check_user_in_db(message.from_user.id):
        if message.from_user.id == OWNER_ID:
            await db.update_rights(message.from_user.id, 'admin')
            await message.answer('üëë –í–∞—à–∏ –ø—Ä–∞–≤–∞ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')


@dp.message_handler(commands=['check'])
async def check_orders(message: types.Message, page=0, message_id=None):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.select_user_rights(message.from_user.id)
        if data[0] == 'admin':
            data = await db.Dont_Check_orders()
            last_page = False
            if data == []:
                if message_id is None:
                    await message.answer('üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.')
                else:
                    await bot.edit_message_text(message_id=message_id, chat_id=message.from_user.id, text='üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.')
            else:
                if message_id is None:
                    await message.answer(f'‚ùï –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(data)}')
                if last_page == False:
                    try:
                        dt = data[int(page)+1]
                    except:
                        last_page = True
                if len(data) == 1:
                    last_page = True
                data = data[int(page)]

                if data[7] == 'None':
                    adress = ''
                else:
                    adress = f'\nüî∑ <b>–ê–¥—Ä–µ—Å</b>:\n<code>{data[6]}</code>\n'

                if data[4] == 'None':
                    subcategory = ''
                else:
                    subcategory = ': '+ data[4]

                text=f"""
üî∂ <b>{data[2]}</b>:
{data[3]}{subcategory}

üî∑ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b>:
<code><b>{data[5]}</b></code>

üî∑ <b>{data[6]}</b>
{adress}
üî∑ <b>–û–ø–ª–∞—Ç–∞</b>:
{data[8]}

üî∑ <b>–ì—Ä–∞—Ñ–∏–∫</b>:
{data[9]}

üî∑ <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b>:
{data[11]}

üî∑ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É</b>:
{data[12]}

üî∑ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>:
{data[10]}

<code>{data[18]}</code>
"""
                post_id = data[0]
                if message_id is None:
                    await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=await check_orders_kb(page, last_page, post_id))
                else:
                    await bot.edit_message_text(chat_id=message.from_user.id, text=text, message_id=message_id, reply_markup=await check_orders_kb(page, last_page, post_id))


@dp.callback_query_handler(text_contains='page_')
async def next_back_page_check(callback: types.CallbackQuery):
    data = (callback.data)[5:]
    await check_orders(callback, page=int(data), message_id=callback.message.message_id)

@dp.callback_query_handler(text_contains='check_')
async def approve_reject_post(callback: types.CallbackQuery):
    data = (callback.data)[6:]
    data = data.split('_')
    try:
        bool = (await db.Check_stat_moder(int(data[1])))[0]
    except:
        bool = True
    if bool:
        await callback.message.answer('üìõ –î–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω!')
        await check_orders(callback, message_id=callback.message.message_id)
    else:
        await db.approve_reject_post_id(oper_type=data[0], post_id=int(data[1]), moder_id=callback.message.chat.id)
        user_id = await db.select_order_user_id(int(data[1]))
        if data[0] == 'approve':
            await callback.message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!')
            await check_orders(callback, message_id=callback.message.message_id)
            await bot.send_message(chat_id=user_id[0], text=f'‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ <b>–∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>!')
        else:
            await callback.message.answer('‚ùå –í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!')
            await check_orders(message=callback, message_id=callback.message.message_id)
            await bot.send_message(chat_id=user_id[0], text=f'‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑—ã –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>!')


@dp.message_handler(commands=['statistics'])
async def statistics_admin_panel(message: types.Message):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.select_user_rights(message.from_user.id)
        if data[0] == 'admin':
            registered_users = await db.registered_users()
            create_orders = await db.all_orders()
            registered_executors = await db.registered_executors()
            registered_admins = await db.registered_admins()
            registered_moders = await db.registered_moders()
            public_orders = len(await db.search_orders(-99999))
            archive_orders = await db.all_archive_orders()
            moder_orders = len(await db.Dont_Check_orders())
            transactions_completed = await db.total_transactions_made()
            text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b><i>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i></b>
<i>üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <code><b>{registered_users}</b></code>
<i>‚öíÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</i> <code><b>{registered_executors}</b></code>
<i>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</i> <code><b>{registered_admins}</b></code>
<i>‚öôÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</i> <code><b>{registered_moders}</b></code>

<b><i>üìÆ –û–±—ä—è–≤–ª–µ–Ω–∏—è</i></b>
<i>üóÇÔ∏è –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</i> <code><b>{create_orders}</b></code>
<i>üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</i> <code><b>{public_orders}</b></code>
<i>üõ†Ô∏è –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</i> <code><b>{moder_orders}</b></code>
<i>üóÉÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ:</i> <code><b>{archive_orders}</b></code>
<i>ü§ù –°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫:</i> <code><b>{transactions_completed}</b></code>
"""
            await message.answer(text)


@dp.message_handler(commands=['users'])
async def admin_panel_users(message: types.Message):
    if await db.check_user_in_db(message.from_user.id):
        data = await db.select_user_rights(message.from_user.id)
        if data[0] == 'admin':
            await message.answer('<b><i>üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i></b>', reply_markup=admin_users_kb())


@dp.callback_query_handler(text='database_kings')
async def database_kings(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = await db.select_user_rights(callback.from_user.id)
        if data[0] == 'admin':
            admins, moders = await db.database_kings()
            ad = ''
            md = ''
            for i in admins:
                ad += f'\n@{i[0]}'
            for i in moders:
                md += f'\n@{i[0]}'

            if md == '':
                title = ''
            else:
                title = '<b><i>‚öôÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:</i></b>'
            text = f"""
<b><i>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</i></b>
{ad}

{title}
{md}
"""
            await callback.message.answer(text)

class Admin_change_Status(StatesGroup):
    user_id = State()

@dp.callback_query_handler(text='admin_change_status')
async def get_user_id(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data = await db.select_user_rights(callback.from_user.id)
        if data[0] == 'admin':
            await Admin_change_Status.next()
            await callback.message.answer('<b><i>üî¢ –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i></b>\n\n<i>–ü—Ä–∏–º–µ—Ä:\n<code>980491704</code>\n<code>6194552812</code></i>', reply_markup=state_stop())

@dp.message_handler(state=Admin_change_Status.user_id)
async def text_user_id(message: types.Message, state: FSMContext):
    if await db.check_user_in_db(message.from_user.id):
        data_admin = await db.select_user_rights(message.from_user.id)
        if data_admin[0] == 'admin':
            try:
                async with state.proxy() as data:
                    data['user_id'] = int(message.text)
                data = await state.get_data()
                await state.finish()
                if await db.check_user_in_db(int(data['user_id'])):
                    if int(data['user_id']) == message.from_user.id and message.from_user.id != OWNER_ID:
                        await message.answer('<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!</b>', reply_markup=await main_menu_kb(message.from_user.id))
                    else:
                        data_admin2 = await db.select_user_rights(int(data['user_id']))
                        if data_admin2[0] == 'admin' and message.from_user.id != OWNER_ID:
                            await message.answer('<b>–¢–æ–ª—å–∫–æ –í–õ–ê–î–ï–õ–ï–¶ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>', reply_markup=await main_menu_kb(message.from_user.id))
                        else:
                            await message.answer(f"<b>üí† –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{data['user_id']}</code></b>", reply_markup=await admin_user_change_status(data['user_id']))
                else:
                    await Admin_change_Status.user_id.set()
                    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.', reply_markup=state_stop())
            except:
                await Admin_change_Status.user_id.set()
                await message.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=state_stop())

@dp.callback_query_handler(text_contains='change_status_')
async def change_stat(callback: types.CallbackQuery):
    if await db.check_user_in_db(callback.from_user.id):
        data_admin = await db.select_user_rights(callback.from_user.id)
        if data_admin[0] == 'admin':
            data = ((callback.data)[14:]).split('_')
            await db.change_status(int(data[1]), data[0])
            await bot.send_message(chat_id=data[1], text=f'üìù –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ <code>{data[0]}</code>')
            await bot.delete_message(message_id=callback.message.message_id, chat_id=callback.from_user.id)
            await callback.message.answer(f'‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{data[1]}</code> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ <code>{data[0]}</code>', reply_markup=await main_menu_kb(callback.from_user.id))


@dp.message_handler(content_types=['text'])
async def redirection(message: types.Message):
    if message.text == 'üòé –ü—Ä–æ—Ñ–∏–ª—å':
        await profile(message)
    elif message.text == 'ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞':
        await referal_url(message)
    elif message.text =='üåü –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        await create_order(message)
    elif message.text =='üîé –ó–∞–∫–∞–∑—ã':
        await search_orders(message)
    elif message.text == 'üóÇÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
        await my_orders(message)
    elif message.text == 'üóÉÔ∏è –ê—Ä—Ö–∏–≤':
        await archive_orders_user(message)
    elif message.text == 'üíº –í —Ä–∞–±–æ—Ç–µ':
        await orders_in_work(message)
    elif message.text == 'ü§ö –û—Ç–∫–ª–∏–∫–∏':
        await responses_user(message)
    elif message.text == 'üõ†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        await admin_panel_users(message)
    elif message.text == 'üóÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤':
        await check_orders(message)
    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await statistics_admin_panel(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)